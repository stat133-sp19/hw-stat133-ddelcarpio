install.packages("testthat")
bin_choose
#' @title bin_choose
#' @description calculates number of ways k successs can occur in n trials
#' @param n number of trials
#' @param k number of successes
#' @return number of ways k success can occur in n trials
#' @export
#' @examples
#' bin_choose(5, 2)
bin_choose <- function(n, k) {
if (sum((k>n) == TRUE) > 0) {
stop("k cannot be greater than n")
}
factorial(n) / (factorial(k)*factorial(n-k))
}
#' @title bin_probability
#' @description calculates the probability of getting a certain number of success
#' in a certain amount of trials, given a certain probability of success, for binomail
#' distributions.
#' @param success number of successes
#' @param trials number of trials
#' @param prob probability of success
#' @return probability of getting success number of successes in trials number of trials,
#' given prob probability of success.
#' @export
#' @examples
#' bin_probability(2, 5, 0.5)
bin_probability <- function(success, trials, prob) {
check_trials(trials)
check_prob(prob)
check_success(success, trials)
bin_choose(trials, success)*(prob^success)*((1-prob)^(trials-success))
}
#' @title bin_distribution
#' @description calculates the binomial distribution given the number of trials
#' and probability of success
#' @param trials number of trials
#' @param prob probability of success
#' @return data frame of the binomial distribution
#' @export
#' @examples
#' bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
df <- data.frame('success'=0:trials, 'probability'=bin_probability(0:trials, trials, prob))
class(df) <- c("bindis", "data.frame")
df
}
#' @export
plot.bindis <- function(x, ...) {
ggplot2::ggplot(x) +
ggplot2::geom_bar(ggplot2::aes(x=x$success, y=x$probability), stat='identity') +
ggplot2::xlab("Successes") +
ggplot2::ylab("Probability")
}
#' @title bin_cumulative
#' @description calculates the binomial distribution, along with the cumulative
#' probability of the distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return data frame of the distribution and cumulative probability
#' @export
#' @examples
#' bin_cumulative(5, 0.5)
bin_cumulative <- function(trials, prob) {
probs <- bin_probability(0:trials, trials, prob)
df <- data.frame("success"=0:trials, "probability"=probs, "cumulative"=cumsum(probs))
class(df) <- c("bincum", "data.frame")
df
}
#' @export
plot.bincum <- function(x, ...) {
ggplot2::ggplot(x) + ggplot2::geom_line(ggplot2::aes(x=x$success, y=x$cumulative)) +
ggplot2::xlab("Successes") +
ggplot2::ylab("Probability")
}
#' @title bin_variable
#' @description create a binvar object which has useful methods such as print
#' and summary which provide a lot of informaton.
#' @param trials number of trials
#' @param prob probability of success
#' @return binvar object
#' @export
#' @examples
#' bin_variable(5, 0.5)
bin_variable <- function(trials, prob) {
check_prob(prob)
check_trials(trials)
obj <- list(
trials=trials,
prob=prob
)
class(obj) <- c("binvar", "list")
obj
}
#' @export
print.binvar <- function(x, ...) {
cat('"Binomial Variable"\n\n')
cat("Parameters\n")
cat(sprintf('- number of trials: %s', x$trials), "\n")
cat(sprintf('- prob of success: %s', x$prob))
}
#' @export
summary.binvar <- function(object, ...) {
l <- list(
trials=object$trials,
prob=object$prob,
mean=aux_mean(object$trials, object$prob),
variance=aux_variance(object$trials, object$prob),
mode=aux_mode(object$trials, object$prob),
skewness=aux_skewness(object$trials, object$prob),
kurtosis=aux_kurtosis(object$trials, object$prob)
)
class(l) <- c("summary.binvar", "list")
l
}
#' @export
print.summary.binvar <- function(x, ...) {
cat('"Summary Binomial"\n\n')
cat("Parameters\n")
cat(sprintf('- number of trials: %s', x$trials), "\n")
cat(sprintf('- prob of success: %s', x$prob), "\n\n")
cat("Measures\n")
cat(sprintf('- mean    : %s', x$mean), "\n")
cat(sprintf('- variance: %s', x$variance), "\n")
cat(sprintf('- mode    : %s', x$mode), "\n")
cat(sprintf('- skewness: %s', x$skewness), "\n")
cat(sprintf('- kurtosis: %s', x$kurtosis), "\n")
}
#' @title bin_mean
#' @description calulates the expected value of a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return expected value of binomial distribution described by parameters
#' @export
#' @examples
#' bin_mean(5, 0.5)
bin_mean <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
aux_mean(trials, prob)
}
#' @title bin_variance
#' @description calulates the variance of a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return variance of binomial distribution described by parameters
#' @export
#' @examples
#' bin_variance(5, 0.5)
bin_variance <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
aux_variance(trials, prob)
}
#' @title bin_mode
#' @description calulates the mode, or most likely number of successes, of a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return mode of binomial distribution described by parameters. Could
#' be a vector of length 2 or 1 depending on how many most likely number of
#' successes there are.
#' @export
#' @examples
#' bin_mode(5, 0.5)
bin_mode <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
aux_mode(trials, prob)
}
#' @title bin_skewness
#' @description calulates the skewness value of a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return skewness value of binomial distribution described by parameters
#' @export
#' @examples
#' bin_skewness(5, 0.5)
bin_skewness <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
aux_skewness(trials, prob)
}
#' @title bin_kurtosis
#' @description calulates the kurtosis value of a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return kurtosis value of binomial distribution described by parameters
#' @export
#' @examples
#' bin_kurtosis(5, 0.5)
bin_kurtosis <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
aux_kurtosis(trials, prob)
}
#Private Function
#Function that takes in trials and prob for a binomial distribution and
#calculates/returns the expected value
aux_mean <- function(trials, prob) {
trials*prob
}
#Private Function
#Function that takes in trials and prob for a binomial distribution and
#calculates/returns the variance
aux_variance <- function(trials, prob) {
(trials*prob)*(1-prob)
}
#Private Function
#Function that takes in trials and prob for a binomial distribution and
#calculates/returns the mode, or most common number(s). Could be 2 numbers
#in which case returned vector is of length 2.
aux_mode <- function(trials, prob) {
val <- trials*prob + prob
if (val%%1 == 0) {
return (c(floor(val), floor(val)-1))
}
return (c(floor(val)))
}
#Private Function
#Function that takes in trials and prob for a binomial distribution and
#calculates/returns the calculated skewness
aux_skewness <- function(trials, prob) {
(1-2*prob)/sqrt((trials*prob)*(1-prob))
}
#Private Function
#Function that takes in trials and prob for a binomial distribution and
#calculates/returns the calculated kurtosis
aux_kurtosis <- function(trials, prob) {
(1-6*prob*(1-prob))/((trials*prob)*(1-prob))
}
#Private Function
#Function that takes in probability and verifies that
#it is between 0 and 1.
#Returns TRUE if so and FALSE otherwise
check_prob <- function(prob) {
if (prob < 0 | prob > 1) {
stop("invalid prob value")
}
TRUE
}
#Private Function
#Function that takes in trials and verifies that it is
#a non negative integer.
#Returns TRUE if so and FALSE otherwise
check_trials <- function(trials) {
if (!is.numeric(trials)) {
stop("invalid trials value, must be a non negative integer")
}
else if (trials%%1!=0 | trials <= 0) {
stop("invalid trials value, must be a non negative integer")
}
TRUE
}
#Private Function
#Function that takes in success and trials and makes sure that
#success is a non negative integer vector that is not greater than
#trials, or negative.
#Returns TRUE if so and FALSE otherwise
check_success <- function(success, trials) {
if (!is.numeric(success)) {
stop("success must be a non negative integer vector")
}
else if (sum(success%%1) != 0) {
stop("success must be a non negative integer vector")
}
else if (sum(!(success <= trials) == TRUE) > 0) {
stop("success cannot be greater than trials")
}
else if (sum(!(success >= 0) == TRUE) > 0) {
stop("success cannot be negative")
}
TRUE
}
bin_choose(5,2)
bin_choose(12,1)
bin_choose(12,'wrong')
bin_choose(1,2)
bin_probability(12,1)
bin_probability(2,5,0.5)
bin_probability(2,4)
bin_probability(2,4,1)
bin_probability(2,4,2)
lul <- bin_cumulative(5,0.5)
lul
3L
3
lul2 <-bin_distribution(5,0.5)
lul2
install.packages("Rtools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
devtools::create("binomial")
devtools::load_all()
install.packages("devtools")
devtools::load_all()
warings()
warnings()
devtools::use_package()
devtools::use_package("binomial")
Authors@R: person("Daniel","del Carpio",email="ddelcarpio@berkeley.edu",role=c("aut","cre"))
devtools::document()
devtools::check_man()
devtools::test()
devtools::test()
aux_kurtosis(10,4)
aux_kurtosis(10,4,2)
check_success(c(1, 2, 3), 3)
check_success(c(1, -2, 3), 5)
check_success(c(1, 2, 3), -3)
check_success(c(1,2,3), 4)
check_success(c(1,2,3), 4)
devtools::test()
dis2 <- bin_distribution(5, 0.5)
dis2
devtools::test()
check_success(c(1,2,3), 4)
check_success(c(1,2,3))
check_success(c(1,2,3),4)
check_success(c(1,2,3),5)
length(check_success(c(1,2,3), 4))
aux_variance(10,4)
aux_variance(10,4,2)
aux_skewness(10, 4)
aux_skewness(10, -1)
aux_skewness(10, 0.4)
aux_skewness(0, 2)
aux_skewness(10, 'the')
devtools::test()
check_success(c(1,2,3), 4)
check_success(c(1,2,3), 4)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::document()
devtools::check_man()
DESCRIPTION
devtools::build()
install.packages("Rtools")
devtools::build()
install.packages("binomial")
devtools::build_vignettes()
devtools::check_man()
load("~/GitHub/stat133/workouts/Binomial/.RData")
devtools::build_vignettes()
devtools::build()
